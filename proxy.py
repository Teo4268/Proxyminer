import asyncio
import uvloop
import websockets
import json

# Cáº¥u hÃ¬nh proxy cho Zpool
POOL_URL = "wss://power2b.na.mine.zpool.ca:6242"  # Pool Zpool thuáº­t toÃ¡n Power2b
PROXY_HOST = "0.0.0.0"  # Láº¯ng nghe táº¥t cáº£ káº¿t ná»‘i
PROXY_PORT = 8000 # Cá»•ng proxy hoáº¡t Ä‘á»™ng
NEW_WORKER_NAME = "ProxyMiner"  # TÃªn worker khi gá»­i Ä‘áº¿n pool

current_job = None  # CÃ´ng viá»‡c hiá»‡n táº¡i tá»« pool
miners = set()  # Danh sÃ¡ch miners káº¿t ná»‘i

async def fetch_job_from_pool():
    """Nháº­n cÃ´ng viá»‡c tá»« Zpool vÃ  gá»­i cho táº¥t cáº£ miners"""
    global current_job
    async with websockets.connect(POOL_URL) as pool_ws:
        print("âœ… Káº¿t ná»‘i vá»›i Zpool thÃ nh cÃ´ng!")

        async for message in pool_ws:
            data = json.loads(message)

            if "method" in data and data["method"] == "mining.notify":
                current_job = message  # LÆ°u cÃ´ng viá»‡c má»›i
                print("ðŸ†• Nháº­n job má»›i tá»« pool, cáº­p nháº­t cho miners...")

                # Gá»­i job má»›i cho táº¥t cáº£ miners
                for miner in miners:
                    await miner.send(current_job)

async def handle_miner(websocket, path):
    """Xá»­ lÃ½ miners káº¿t ná»‘i Ä‘áº¿n proxy"""
    miners.add(websocket)

    # Gá»­i cÃ´ng viá»‡c hiá»‡n táº¡i cho miner khi káº¿t ná»‘i
    if current_job:
        await websocket.send(current_job)

    try:
        async for message in websocket:
            data = json.loads(message)

            # Náº¿u miner gá»­i yÃªu cáº§u "mining.authorize", Ä‘á»•i tÃªn worker
            if "method" in data and data["method"] == "mining.authorize":
                data["params"][0] = NEW_WORKER_NAME  # Thay Ä‘á»•i tÃªn worker

            # Náº¿u miner gá»­i share, gá»­i lÃªn Zpool
            async with websockets.connect(POOL_URL) as pool_ws:
                await pool_ws.send(json.dumps(data))

    except:
        miners.remove(websocket)  # XÃ³a miner náº¿u máº¥t káº¿t ná»‘i

async def main():
    """Khá»Ÿi cháº¡y proxy"""
    asyncio.create_task(fetch_job_from_pool())  # Nháº­n job tá»« pool
    async with websockets.serve(handle_miner, PROXY_HOST, PROXY_PORT):
        print(f"ðŸš€ Proxy cháº¡y trÃªn {PROXY_HOST}:{PROXY_PORT}, há»— trá»£ 100 miners!")
        await asyncio.Future()  # Giá»¯ chÆ°Æ¡ng trÃ¬nh cháº¡y

if __name__ == "__main__":
    asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())  # DÃ¹ng uvloop tÄƒng tá»‘c
    asyncio.run(main())
